@CrossOrigin is an annotation in Spring Boot that enables Cross-Origin Resource Sharing (CORS) for a specific controller or method.

# What is CORS?
CORS is a security feature implemented in web browsers to prevent web pages from making requests to a different origin (domain, protocol, or port) than the one the web page was loaded from. This is done to prevent malicious scripts from making unauthorized requests on behalf of the user.

# How to use @CrossOrigin?
To enable CORS for a specific controller or method, you can use the @CrossOrigin annotation. Here is an example:


@CrossOrigin(origins = "http://example.com")
@RestController
public class MyController {
  
  @GetMapping("/data")
  public String getData() {
    return "Hello, World!";
  }
}


In this example, the @CrossOrigin annotation is applied to the MyController class, which enables CORS for all methods in this controller. The origins attribute specifies the allowed origins.

You can also apply the @CrossOrigin annotation to a specific method:


@RestController
public class MyController {
  
  @CrossOrigin(origins = "http://example.com")
  @GetMapping("/data")
  public String getData() {
    return "Hello, World!";
  }
}


In this example, CORS is only enabled for the getData() method.

# Attributes of @CrossOrigin
The @CrossOrigin annotation has several attributes that can be used to customize CORS:

- origins: Specifies the allowed origins. Can be a single value or an array of values.
- methods: Specifies the allowed HTTP methods. Can be a single value or an array of values.
- allowedHeaders: Specifies the allowed headers. Can be a single value or an array of values.
- exposedHeaders: Specifies the exposed headers. Can be a single value or an array of values.
- maxAge: Specifies the maximum age of the CORS configuration.
- allowCredentials: Specifies whether credentials are allowed.

# Global CORS Configuration
Instead of applying the @CrossOrigin annotation to each controller or method, you can configure CORS globally using the WebMvcConfigurer interface:


@Configuration
public class WebConfig implements WebMvcConfigurer {
  
  @Override
  public void addCorsMappings(CorsRegistry registry) {
    registry.addMapping("/**")
      .allowedOrigins("http://example.com")
      .allowedMethods("GET", "POST", "PUT", "DELETE")
      .allowedHeaders("Content-Type", "Authorization")
      .exposedHeaders("Location")
      .allowCredentials(true)
      .maxAge(3600);
  }
}


In this example, CORS is enabled for all URLs (/**) and allows requests from the specified origin, methods, headers, and exposed headers.