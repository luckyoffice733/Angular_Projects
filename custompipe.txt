 custom pipe
 ===========
 step:1
 
 create  a class which implements PipeTranform

 step 2:
 
   provide the implementation for function named as transform()

 step 3:

 declare pipe decorator on top of  class 

  e.g:
  
   @Pipe({
        name:'pipename'       ---to use the custom pipe
     })
   export class classname implements PipeTransform{

       transform(){
        //business logic
     }
   }

  step 4:
  =======
    to globally available for pipe we need to declare pipe class in 
   declarations array in app.module.ts  and import class from ts file using import keyword

  step 5:
  ========
  use custom pipe in any component 

  Example:
   ======
   1) create a custom pipe which return square root of a number



     a) create a ts file named as customPipe.ts

        import {Pipe,PipeTransform } from '@angualr/core'
       
       @Pipe({
            name:'mySqrt'
       })
       export class ExampleOnCustomPipe implements PipeTransform{


         tranform(num:number):number{

              return Math.sqrt(num);
         }
 
        }






   b)declare the class in declaration array in app.module.ts and import the ts file name

   c) square root of number is : {{25|mySqrt}}    o/p:-5





Example:2
=========
Create a custom pipe to convert the video duration into hours and minutes
pipename=duration

import { Pipe, PipeTransform } from "@angular/core";

@Pipe({
    "name": "duration"
})
export class DurationPipe implements PipeTransform {

    transform(value: any, format: string): string {
        var s;
        if (format == "hoursonly")
            s = value / 60 + "hrs";
        else if (format == "hoursandminutes")
            s = Math.floor(value / 60) + " hrs " + ((value % 60 > 0) ? (" and " + value % 60) + "mins" : "");
        else
            s = value;
        return s;

    }
}








